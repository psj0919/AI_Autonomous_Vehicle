#횡단보도, 정지 표지판에 대한 실행코드
import os
import cv2
import time
import math

import bready.camera_utils.PyCamera as PyCamera
from bready.road_following_tools import RoadFollower
from bready.object_detection_tools import ObjectDetector
from bready.autovehicle_utils.autovehicleControlClient import AutoVehicleControlClient
from bready.autovehicle_utils.PID_Controller import PID_controller

import ipywidgets.widgets as widgets
import IPython.display

vehicle_server = AutoVehicleControlClient("127.0.0.1",8886)
road_model
RoadFollower.Tester("/home/bready/AutoVehicle_Server/AI_models/road_following/models_xavier")
road_model.setAugmentation_Option(RoadFollower.Image_Augmentation.HALF_BLACK, True)
obj_model = ObjectDetector.Tester("V_detect1_final", "V_detect1_classes.txt")
print(obj_model.getDetectableClassList())
camera = PyCamera.URLCamera("tcp://127.0.0.1:5000")
pid_Degree = None

import configparser
config = configparser.ConfigParser()
config.read("/home/bready/AutoVehicle_Server/setting/autovehicle.ini")

if(pid_Degree is not None):
  pid_Degree.Kp = float(config["ai_pid]["p_gain"])
  pid_Degree.Ki = float(config["ai_pid]["i_gain"])
  pid_Degree.Kd = float(config["ai_pid]["d_gain"])
else:
  pid_Degree = PID_Controller(float(config["ai_pid]["p_gain"]),float(config["ai_pid]["i_gain"]),float(config["ai_pid]["d_gain"]), -30, 30)
pid_Degree.set_SamplingTime(0.1)
target_stop_acc = 0.8
crosswalk_detected = False
stop_sign_flag = False
stop_at_stopline_flag = False
stop_at_stopline_time = 0
prev_DegreeError = 0
image_widget1 = widgets.Image(format = 'jpeg')
image_widget2 = widgets.Image(format = 'jpeg')
IPython.display.display(widgets.HBox([image_widget1, images_widget2]))
try:
    while True:
      frame = camera.get_frame()
      if(not camera.isOpened()):
        break
      obj_model.excute(frame)
      road_model.execute(frame)
      speed_value = 100
      steering_value = 90
      for i in obj_model.getDetectedList():
          if i['detection_names'] == 'crosswalk' and i['detection_width'] <= 0.5:
              if crosswalk_detected ==False:
                crosswalk_deteted = True
                corsswalk_time = time.time()

          if i['detection_names'] == 'stop sign' and i['detection_width'] <= 0.5:
              stop_sign_flag = True
              stop_at_stopline_flag = True
    x = (road_model.getDetectedValue(category_type='track',category_name='middle'))[0]
    y = (road_model.getDetectedValue(category_type='track',category_name='middle'))[1]
    degreeError = math.atan2((1-y), x)/ math.pi * 180 -90
    if prev_DegreeError > 0 and degreeError < 0 or prev_DegreeError < 0 and degree Error > 0 :
        pid_Degree.clearError()
    prev_DegreeError = degreeError
    steering_value = min(max((pid_Degree.getControlValue(degreeError)) * 3 + 90, 0), 180)
    if crosswalk_detected:
      speed_value *= 0.8

      if time.time() - crosswalk_time < 4:
        if math.floor(time.time() - crosswalk_time) % 2 == 1:
            vehicle_server.controlHorn(int(0))
        else:
            vehicle_server.controlHorn(int(1))
      elif time.time() - crosswalk_time >= 15:
            crosswalk_detected = False
            vehicle_server.controlHorn(int(0))
    if stop_at_stopline_flag == True:
      if(road_model.getDetectedValue(category_type = 'classification', category_name = 'stop_line')) > target_stop_acc:
          speed_value = 0
          if stop_sign_flag = True:
              stop_at_stopline_time = time.time()
              stop_at_stopline_flag = False
          if crosswalk_detected == True:
              crosswalk_detected = False
              vehicle_server.controlHorn(int(0))
          if stop_sign_flag == False:
              stop_at_stopline_flag = False
    elif stop_sign_flag == Ture:
        speed_value = 0
        if time.time() - stop_at_stopline_time > 3:
            stop_sign_flag = False
      vehicle_server.controlMotor(int(speed_value))
      vehicle_server.controlDirection(int(steering_value))
      vehicle_server.sendData()

      tmpStream = cv2.imencode(".jpeg", obj_model.getResultImage()[1].tostring())
      image_widget1.value = tmpStream
      tmpStream = cv2.imencode(".jpeg", road_model.getResultImage()[1].tostring())
      image_widget2.value = tmpStream
      time.sleep(0.001)

except KeyboardInterrupt:
  pass
except Exception as e:
  import traceback
  traceback.print_exc()
  print(e)
finally:
  vehicle_server.controlMotor(int(0))
  vehicle_server.sendData()
  print("종료")
vehicle_server.disconnect()
vehicle_server.close()


        
  
